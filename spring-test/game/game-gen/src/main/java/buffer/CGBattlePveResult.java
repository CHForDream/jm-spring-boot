// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CGBattlePveResult.proto

package buffer;

public final class CGBattlePveResult {
  private CGBattlePveResult() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ChessProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional int32 chessId = 1;
    boolean hasChessId();
    int getChessId();
    
    // optional int32 chessNum = 2;
    boolean hasChessNum();
    int getChessNum();
  }
  public static final class ChessProto extends
      com.google.protobuf.GeneratedMessage
      implements ChessProtoOrBuilder {
    // Use ChessProto.newBuilder() to construct.
    private ChessProto(Builder builder) {
      super(builder);
    }
    private ChessProto(boolean noInit) {}
    
    private static final ChessProto defaultInstance;
    public static ChessProto getDefaultInstance() {
      return defaultInstance;
    }
    
    public ChessProto getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return buffer.CGBattlePveResult.internal_static_buffer_ChessProto_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return buffer.CGBattlePveResult.internal_static_buffer_ChessProto_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional int32 chessId = 1;
    public static final int CHESSID_FIELD_NUMBER = 1;
    private int chessId_;
    public boolean hasChessId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getChessId() {
      return chessId_;
    }
    
    // optional int32 chessNum = 2;
    public static final int CHESSNUM_FIELD_NUMBER = 2;
    private int chessNum_;
    public boolean hasChessNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getChessNum() {
      return chessNum_;
    }
    
    private void initFields() {
      chessId_ = 0;
      chessNum_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, chessId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, chessNum_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, chessId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, chessNum_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static buffer.CGBattlePveResult.ChessProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static buffer.CGBattlePveResult.ChessProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static buffer.CGBattlePveResult.ChessProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static buffer.CGBattlePveResult.ChessProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static buffer.CGBattlePveResult.ChessProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static buffer.CGBattlePveResult.ChessProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static buffer.CGBattlePveResult.ChessProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static buffer.CGBattlePveResult.ChessProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static buffer.CGBattlePveResult.ChessProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static buffer.CGBattlePveResult.ChessProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(buffer.CGBattlePveResult.ChessProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements buffer.CGBattlePveResult.ChessProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return buffer.CGBattlePveResult.internal_static_buffer_ChessProto_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return buffer.CGBattlePveResult.internal_static_buffer_ChessProto_fieldAccessorTable;
      }
      
      // Construct using buffer.CGBattlePveResult.ChessProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        chessId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        chessNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return buffer.CGBattlePveResult.ChessProto.getDescriptor();
      }
      
      public buffer.CGBattlePveResult.ChessProto getDefaultInstanceForType() {
        return buffer.CGBattlePveResult.ChessProto.getDefaultInstance();
      }
      
      public buffer.CGBattlePveResult.ChessProto build() {
        buffer.CGBattlePveResult.ChessProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private buffer.CGBattlePveResult.ChessProto buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        buffer.CGBattlePveResult.ChessProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public buffer.CGBattlePveResult.ChessProto buildPartial() {
        buffer.CGBattlePveResult.ChessProto result = new buffer.CGBattlePveResult.ChessProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.chessId_ = chessId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.chessNum_ = chessNum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof buffer.CGBattlePveResult.ChessProto) {
          return mergeFrom((buffer.CGBattlePveResult.ChessProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(buffer.CGBattlePveResult.ChessProto other) {
        if (other == buffer.CGBattlePveResult.ChessProto.getDefaultInstance()) return this;
        if (other.hasChessId()) {
          setChessId(other.getChessId());
        }
        if (other.hasChessNum()) {
          setChessNum(other.getChessNum());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              chessId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              chessNum_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional int32 chessId = 1;
      private int chessId_ ;
      public boolean hasChessId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getChessId() {
        return chessId_;
      }
      public Builder setChessId(int value) {
        bitField0_ |= 0x00000001;
        chessId_ = value;
        onChanged();
        return this;
      }
      public Builder clearChessId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        chessId_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 chessNum = 2;
      private int chessNum_ ;
      public boolean hasChessNum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getChessNum() {
        return chessNum_;
      }
      public Builder setChessNum(int value) {
        bitField0_ |= 0x00000002;
        chessNum_ = value;
        onChanged();
        return this;
      }
      public Builder clearChessNum() {
        bitField0_ = (bitField0_ & ~0x00000002);
        chessNum_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:buffer.ChessProto)
    }
    
    static {
      defaultInstance = new ChessProto(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:buffer.ChessProto)
  }
  
  public interface ComboProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional int32 comboId = 1;
    boolean hasComboId();
    int getComboId();
    
    // optional int32 comboNum = 2;
    boolean hasComboNum();
    int getComboNum();
  }
  public static final class ComboProto extends
      com.google.protobuf.GeneratedMessage
      implements ComboProtoOrBuilder {
    // Use ComboProto.newBuilder() to construct.
    private ComboProto(Builder builder) {
      super(builder);
    }
    private ComboProto(boolean noInit) {}
    
    private static final ComboProto defaultInstance;
    public static ComboProto getDefaultInstance() {
      return defaultInstance;
    }
    
    public ComboProto getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return buffer.CGBattlePveResult.internal_static_buffer_ComboProto_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return buffer.CGBattlePveResult.internal_static_buffer_ComboProto_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional int32 comboId = 1;
    public static final int COMBOID_FIELD_NUMBER = 1;
    private int comboId_;
    public boolean hasComboId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getComboId() {
      return comboId_;
    }
    
    // optional int32 comboNum = 2;
    public static final int COMBONUM_FIELD_NUMBER = 2;
    private int comboNum_;
    public boolean hasComboNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getComboNum() {
      return comboNum_;
    }
    
    private void initFields() {
      comboId_ = 0;
      comboNum_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, comboId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, comboNum_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, comboId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, comboNum_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static buffer.CGBattlePveResult.ComboProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static buffer.CGBattlePveResult.ComboProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static buffer.CGBattlePveResult.ComboProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static buffer.CGBattlePveResult.ComboProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static buffer.CGBattlePveResult.ComboProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static buffer.CGBattlePveResult.ComboProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static buffer.CGBattlePveResult.ComboProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static buffer.CGBattlePveResult.ComboProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static buffer.CGBattlePveResult.ComboProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static buffer.CGBattlePveResult.ComboProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(buffer.CGBattlePveResult.ComboProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements buffer.CGBattlePveResult.ComboProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return buffer.CGBattlePveResult.internal_static_buffer_ComboProto_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return buffer.CGBattlePveResult.internal_static_buffer_ComboProto_fieldAccessorTable;
      }
      
      // Construct using buffer.CGBattlePveResult.ComboProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        comboId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        comboNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return buffer.CGBattlePveResult.ComboProto.getDescriptor();
      }
      
      public buffer.CGBattlePveResult.ComboProto getDefaultInstanceForType() {
        return buffer.CGBattlePveResult.ComboProto.getDefaultInstance();
      }
      
      public buffer.CGBattlePveResult.ComboProto build() {
        buffer.CGBattlePveResult.ComboProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private buffer.CGBattlePveResult.ComboProto buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        buffer.CGBattlePveResult.ComboProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public buffer.CGBattlePveResult.ComboProto buildPartial() {
        buffer.CGBattlePveResult.ComboProto result = new buffer.CGBattlePveResult.ComboProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.comboId_ = comboId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.comboNum_ = comboNum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof buffer.CGBattlePveResult.ComboProto) {
          return mergeFrom((buffer.CGBattlePveResult.ComboProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(buffer.CGBattlePveResult.ComboProto other) {
        if (other == buffer.CGBattlePveResult.ComboProto.getDefaultInstance()) return this;
        if (other.hasComboId()) {
          setComboId(other.getComboId());
        }
        if (other.hasComboNum()) {
          setComboNum(other.getComboNum());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              comboId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              comboNum_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional int32 comboId = 1;
      private int comboId_ ;
      public boolean hasComboId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getComboId() {
        return comboId_;
      }
      public Builder setComboId(int value) {
        bitField0_ |= 0x00000001;
        comboId_ = value;
        onChanged();
        return this;
      }
      public Builder clearComboId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        comboId_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 comboNum = 2;
      private int comboNum_ ;
      public boolean hasComboNum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getComboNum() {
        return comboNum_;
      }
      public Builder setComboNum(int value) {
        bitField0_ |= 0x00000002;
        comboNum_ = value;
        onChanged();
        return this;
      }
      public Builder clearComboNum() {
        bitField0_ = (bitField0_ & ~0x00000002);
        comboNum_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:buffer.ComboProto)
    }
    
    static {
      defaultInstance = new ComboProto(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:buffer.ComboProto)
  }
  
  public interface CGBattlePveResultProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional int32 msgType = 1 [default = 25001];
    boolean hasMsgType();
    int getMsgType();
    
    // optional int32 battleType = 2;
    boolean hasBattleType();
    int getBattleType();
    
    // optional int32 cityId = 3;
    boolean hasCityId();
    int getCityId();
    
    // optional int32 pveId = 4;
    boolean hasPveId();
    int getPveId();
    
    // optional int32 dupId = 5;
    boolean hasDupId();
    int getDupId();
    
    // optional int32 result = 6;
    boolean hasResult();
    int getResult();
    
    // optional int32 leftStep = 7;
    boolean hasLeftStep();
    int getLeftStep();
    
    // optional int32 costStep = 8;
    boolean hasCostStep();
    int getCostStep();
    
    // repeated .buffer.ChessProto chessInfo = 10;
    java.util.List<buffer.CGBattlePveResult.ChessProto> 
        getChessInfoList();
    buffer.CGBattlePveResult.ChessProto getChessInfo(int index);
    int getChessInfoCount();
    java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
        getChessInfoOrBuilderList();
    buffer.CGBattlePveResult.ChessProtoOrBuilder getChessInfoOrBuilder(
        int index);
    
    // repeated .buffer.ComboProto comboInfo = 11;
    java.util.List<buffer.CGBattlePveResult.ComboProto> 
        getComboInfoList();
    buffer.CGBattlePveResult.ComboProto getComboInfo(int index);
    int getComboInfoCount();
    java.util.List<? extends buffer.CGBattlePveResult.ComboProtoOrBuilder> 
        getComboInfoOrBuilderList();
    buffer.CGBattlePveResult.ComboProtoOrBuilder getComboInfoOrBuilder(
        int index);
    
    // repeated .buffer.ChessProto composeInfo = 12;
    java.util.List<buffer.CGBattlePveResult.ChessProto> 
        getComposeInfoList();
    buffer.CGBattlePveResult.ChessProto getComposeInfo(int index);
    int getComposeInfoCount();
    java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
        getComposeInfoOrBuilderList();
    buffer.CGBattlePveResult.ChessProtoOrBuilder getComposeInfoOrBuilder(
        int index);
    
    // repeated .buffer.ChessProto scoreInfo = 13;
    java.util.List<buffer.CGBattlePveResult.ChessProto> 
        getScoreInfoList();
    buffer.CGBattlePveResult.ChessProto getScoreInfo(int index);
    int getScoreInfoCount();
    java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
        getScoreInfoOrBuilderList();
    buffer.CGBattlePveResult.ChessProtoOrBuilder getScoreInfoOrBuilder(
        int index);
    
    // optional int32 skillNum = 14;
    boolean hasSkillNum();
    int getSkillNum();
    
    // repeated .buffer.ChessProto leftTargets = 15;
    java.util.List<buffer.CGBattlePveResult.ChessProto> 
        getLeftTargetsList();
    buffer.CGBattlePveResult.ChessProto getLeftTargets(int index);
    int getLeftTargetsCount();
    java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
        getLeftTargetsOrBuilderList();
    buffer.CGBattlePveResult.ChessProtoOrBuilder getLeftTargetsOrBuilder(
        int index);
  }
  public static final class CGBattlePveResultProto extends
      com.google.protobuf.GeneratedMessage
      implements CGBattlePveResultProtoOrBuilder {
    // Use CGBattlePveResultProto.newBuilder() to construct.
    private CGBattlePveResultProto(Builder builder) {
      super(builder);
    }
    private CGBattlePveResultProto(boolean noInit) {}
    
    private static final CGBattlePveResultProto defaultInstance;
    public static CGBattlePveResultProto getDefaultInstance() {
      return defaultInstance;
    }
    
    public CGBattlePveResultProto getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return buffer.CGBattlePveResult.internal_static_buffer_CGBattlePveResultProto_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return buffer.CGBattlePveResult.internal_static_buffer_CGBattlePveResultProto_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional int32 msgType = 1 [default = 25001];
    public static final int MSGTYPE_FIELD_NUMBER = 1;
    private int msgType_;
    public boolean hasMsgType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getMsgType() {
      return msgType_;
    }
    
    // optional int32 battleType = 2;
    public static final int BATTLETYPE_FIELD_NUMBER = 2;
    private int battleType_;
    public boolean hasBattleType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getBattleType() {
      return battleType_;
    }
    
    // optional int32 cityId = 3;
    public static final int CITYID_FIELD_NUMBER = 3;
    private int cityId_;
    public boolean hasCityId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getCityId() {
      return cityId_;
    }
    
    // optional int32 pveId = 4;
    public static final int PVEID_FIELD_NUMBER = 4;
    private int pveId_;
    public boolean hasPveId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public int getPveId() {
      return pveId_;
    }
    
    // optional int32 dupId = 5;
    public static final int DUPID_FIELD_NUMBER = 5;
    private int dupId_;
    public boolean hasDupId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getDupId() {
      return dupId_;
    }
    
    // optional int32 result = 6;
    public static final int RESULT_FIELD_NUMBER = 6;
    private int result_;
    public boolean hasResult() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public int getResult() {
      return result_;
    }
    
    // optional int32 leftStep = 7;
    public static final int LEFTSTEP_FIELD_NUMBER = 7;
    private int leftStep_;
    public boolean hasLeftStep() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public int getLeftStep() {
      return leftStep_;
    }
    
    // optional int32 costStep = 8;
    public static final int COSTSTEP_FIELD_NUMBER = 8;
    private int costStep_;
    public boolean hasCostStep() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public int getCostStep() {
      return costStep_;
    }
    
    // repeated .buffer.ChessProto chessInfo = 10;
    public static final int CHESSINFO_FIELD_NUMBER = 10;
    private java.util.List<buffer.CGBattlePveResult.ChessProto> chessInfo_;
    public java.util.List<buffer.CGBattlePveResult.ChessProto> getChessInfoList() {
      return chessInfo_;
    }
    public java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
        getChessInfoOrBuilderList() {
      return chessInfo_;
    }
    public int getChessInfoCount() {
      return chessInfo_.size();
    }
    public buffer.CGBattlePveResult.ChessProto getChessInfo(int index) {
      return chessInfo_.get(index);
    }
    public buffer.CGBattlePveResult.ChessProtoOrBuilder getChessInfoOrBuilder(
        int index) {
      return chessInfo_.get(index);
    }
    
    // repeated .buffer.ComboProto comboInfo = 11;
    public static final int COMBOINFO_FIELD_NUMBER = 11;
    private java.util.List<buffer.CGBattlePveResult.ComboProto> comboInfo_;
    public java.util.List<buffer.CGBattlePveResult.ComboProto> getComboInfoList() {
      return comboInfo_;
    }
    public java.util.List<? extends buffer.CGBattlePveResult.ComboProtoOrBuilder> 
        getComboInfoOrBuilderList() {
      return comboInfo_;
    }
    public int getComboInfoCount() {
      return comboInfo_.size();
    }
    public buffer.CGBattlePveResult.ComboProto getComboInfo(int index) {
      return comboInfo_.get(index);
    }
    public buffer.CGBattlePveResult.ComboProtoOrBuilder getComboInfoOrBuilder(
        int index) {
      return comboInfo_.get(index);
    }
    
    // repeated .buffer.ChessProto composeInfo = 12;
    public static final int COMPOSEINFO_FIELD_NUMBER = 12;
    private java.util.List<buffer.CGBattlePveResult.ChessProto> composeInfo_;
    public java.util.List<buffer.CGBattlePveResult.ChessProto> getComposeInfoList() {
      return composeInfo_;
    }
    public java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
        getComposeInfoOrBuilderList() {
      return composeInfo_;
    }
    public int getComposeInfoCount() {
      return composeInfo_.size();
    }
    public buffer.CGBattlePveResult.ChessProto getComposeInfo(int index) {
      return composeInfo_.get(index);
    }
    public buffer.CGBattlePveResult.ChessProtoOrBuilder getComposeInfoOrBuilder(
        int index) {
      return composeInfo_.get(index);
    }
    
    // repeated .buffer.ChessProto scoreInfo = 13;
    public static final int SCOREINFO_FIELD_NUMBER = 13;
    private java.util.List<buffer.CGBattlePveResult.ChessProto> scoreInfo_;
    public java.util.List<buffer.CGBattlePveResult.ChessProto> getScoreInfoList() {
      return scoreInfo_;
    }
    public java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
        getScoreInfoOrBuilderList() {
      return scoreInfo_;
    }
    public int getScoreInfoCount() {
      return scoreInfo_.size();
    }
    public buffer.CGBattlePveResult.ChessProto getScoreInfo(int index) {
      return scoreInfo_.get(index);
    }
    public buffer.CGBattlePveResult.ChessProtoOrBuilder getScoreInfoOrBuilder(
        int index) {
      return scoreInfo_.get(index);
    }
    
    // optional int32 skillNum = 14;
    public static final int SKILLNUM_FIELD_NUMBER = 14;
    private int skillNum_;
    public boolean hasSkillNum() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public int getSkillNum() {
      return skillNum_;
    }
    
    // repeated .buffer.ChessProto leftTargets = 15;
    public static final int LEFTTARGETS_FIELD_NUMBER = 15;
    private java.util.List<buffer.CGBattlePveResult.ChessProto> leftTargets_;
    public java.util.List<buffer.CGBattlePveResult.ChessProto> getLeftTargetsList() {
      return leftTargets_;
    }
    public java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
        getLeftTargetsOrBuilderList() {
      return leftTargets_;
    }
    public int getLeftTargetsCount() {
      return leftTargets_.size();
    }
    public buffer.CGBattlePveResult.ChessProto getLeftTargets(int index) {
      return leftTargets_.get(index);
    }
    public buffer.CGBattlePveResult.ChessProtoOrBuilder getLeftTargetsOrBuilder(
        int index) {
      return leftTargets_.get(index);
    }
    
    private void initFields() {
      msgType_ = 25001;
      battleType_ = 0;
      cityId_ = 0;
      pveId_ = 0;
      dupId_ = 0;
      result_ = 0;
      leftStep_ = 0;
      costStep_ = 0;
      chessInfo_ = java.util.Collections.emptyList();
      comboInfo_ = java.util.Collections.emptyList();
      composeInfo_ = java.util.Collections.emptyList();
      scoreInfo_ = java.util.Collections.emptyList();
      skillNum_ = 0;
      leftTargets_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, msgType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, battleType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, cityId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, pveId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, dupId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, result_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, leftStep_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, costStep_);
      }
      for (int i = 0; i < chessInfo_.size(); i++) {
        output.writeMessage(10, chessInfo_.get(i));
      }
      for (int i = 0; i < comboInfo_.size(); i++) {
        output.writeMessage(11, comboInfo_.get(i));
      }
      for (int i = 0; i < composeInfo_.size(); i++) {
        output.writeMessage(12, composeInfo_.get(i));
      }
      for (int i = 0; i < scoreInfo_.size(); i++) {
        output.writeMessage(13, scoreInfo_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(14, skillNum_);
      }
      for (int i = 0; i < leftTargets_.size(); i++) {
        output.writeMessage(15, leftTargets_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, msgType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, battleType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, cityId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, pveId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, dupId_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, result_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, leftStep_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, costStep_);
      }
      for (int i = 0; i < chessInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, chessInfo_.get(i));
      }
      for (int i = 0; i < comboInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, comboInfo_.get(i));
      }
      for (int i = 0; i < composeInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, composeInfo_.get(i));
      }
      for (int i = 0; i < scoreInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, scoreInfo_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, skillNum_);
      }
      for (int i = 0; i < leftTargets_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, leftTargets_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static buffer.CGBattlePveResult.CGBattlePveResultProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static buffer.CGBattlePveResult.CGBattlePveResultProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static buffer.CGBattlePveResult.CGBattlePveResultProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static buffer.CGBattlePveResult.CGBattlePveResultProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static buffer.CGBattlePveResult.CGBattlePveResultProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static buffer.CGBattlePveResult.CGBattlePveResultProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static buffer.CGBattlePveResult.CGBattlePveResultProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static buffer.CGBattlePveResult.CGBattlePveResultProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static buffer.CGBattlePveResult.CGBattlePveResultProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static buffer.CGBattlePveResult.CGBattlePveResultProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(buffer.CGBattlePveResult.CGBattlePveResultProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements buffer.CGBattlePveResult.CGBattlePveResultProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return buffer.CGBattlePveResult.internal_static_buffer_CGBattlePveResultProto_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return buffer.CGBattlePveResult.internal_static_buffer_CGBattlePveResultProto_fieldAccessorTable;
      }
      
      // Construct using buffer.CGBattlePveResult.CGBattlePveResultProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getChessInfoFieldBuilder();
          getComboInfoFieldBuilder();
          getComposeInfoFieldBuilder();
          getScoreInfoFieldBuilder();
          getLeftTargetsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        msgType_ = 25001;
        bitField0_ = (bitField0_ & ~0x00000001);
        battleType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        cityId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        pveId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        dupId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        result_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        leftStep_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        costStep_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        if (chessInfoBuilder_ == null) {
          chessInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          chessInfoBuilder_.clear();
        }
        if (comboInfoBuilder_ == null) {
          comboInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          comboInfoBuilder_.clear();
        }
        if (composeInfoBuilder_ == null) {
          composeInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          composeInfoBuilder_.clear();
        }
        if (scoreInfoBuilder_ == null) {
          scoreInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          scoreInfoBuilder_.clear();
        }
        skillNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        if (leftTargetsBuilder_ == null) {
          leftTargets_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
        } else {
          leftTargetsBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return buffer.CGBattlePveResult.CGBattlePveResultProto.getDescriptor();
      }
      
      public buffer.CGBattlePveResult.CGBattlePveResultProto getDefaultInstanceForType() {
        return buffer.CGBattlePveResult.CGBattlePveResultProto.getDefaultInstance();
      }
      
      public buffer.CGBattlePveResult.CGBattlePveResultProto build() {
        buffer.CGBattlePveResult.CGBattlePveResultProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private buffer.CGBattlePveResult.CGBattlePveResultProto buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        buffer.CGBattlePveResult.CGBattlePveResultProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public buffer.CGBattlePveResult.CGBattlePveResultProto buildPartial() {
        buffer.CGBattlePveResult.CGBattlePveResultProto result = new buffer.CGBattlePveResult.CGBattlePveResultProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.msgType_ = msgType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.battleType_ = battleType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cityId_ = cityId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.pveId_ = pveId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.dupId_ = dupId_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.result_ = result_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.leftStep_ = leftStep_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.costStep_ = costStep_;
        if (chessInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            chessInfo_ = java.util.Collections.unmodifiableList(chessInfo_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.chessInfo_ = chessInfo_;
        } else {
          result.chessInfo_ = chessInfoBuilder_.build();
        }
        if (comboInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            comboInfo_ = java.util.Collections.unmodifiableList(comboInfo_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.comboInfo_ = comboInfo_;
        } else {
          result.comboInfo_ = comboInfoBuilder_.build();
        }
        if (composeInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            composeInfo_ = java.util.Collections.unmodifiableList(composeInfo_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.composeInfo_ = composeInfo_;
        } else {
          result.composeInfo_ = composeInfoBuilder_.build();
        }
        if (scoreInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800)) {
            scoreInfo_ = java.util.Collections.unmodifiableList(scoreInfo_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.scoreInfo_ = scoreInfo_;
        } else {
          result.scoreInfo_ = scoreInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.skillNum_ = skillNum_;
        if (leftTargetsBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000)) {
            leftTargets_ = java.util.Collections.unmodifiableList(leftTargets_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.leftTargets_ = leftTargets_;
        } else {
          result.leftTargets_ = leftTargetsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof buffer.CGBattlePveResult.CGBattlePveResultProto) {
          return mergeFrom((buffer.CGBattlePveResult.CGBattlePveResultProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(buffer.CGBattlePveResult.CGBattlePveResultProto other) {
        if (other == buffer.CGBattlePveResult.CGBattlePveResultProto.getDefaultInstance()) return this;
        if (other.hasMsgType()) {
          setMsgType(other.getMsgType());
        }
        if (other.hasBattleType()) {
          setBattleType(other.getBattleType());
        }
        if (other.hasCityId()) {
          setCityId(other.getCityId());
        }
        if (other.hasPveId()) {
          setPveId(other.getPveId());
        }
        if (other.hasDupId()) {
          setDupId(other.getDupId());
        }
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        if (other.hasLeftStep()) {
          setLeftStep(other.getLeftStep());
        }
        if (other.hasCostStep()) {
          setCostStep(other.getCostStep());
        }
        if (chessInfoBuilder_ == null) {
          if (!other.chessInfo_.isEmpty()) {
            if (chessInfo_.isEmpty()) {
              chessInfo_ = other.chessInfo_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureChessInfoIsMutable();
              chessInfo_.addAll(other.chessInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.chessInfo_.isEmpty()) {
            if (chessInfoBuilder_.isEmpty()) {
              chessInfoBuilder_.dispose();
              chessInfoBuilder_ = null;
              chessInfo_ = other.chessInfo_;
              bitField0_ = (bitField0_ & ~0x00000100);
              chessInfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChessInfoFieldBuilder() : null;
            } else {
              chessInfoBuilder_.addAllMessages(other.chessInfo_);
            }
          }
        }
        if (comboInfoBuilder_ == null) {
          if (!other.comboInfo_.isEmpty()) {
            if (comboInfo_.isEmpty()) {
              comboInfo_ = other.comboInfo_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureComboInfoIsMutable();
              comboInfo_.addAll(other.comboInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.comboInfo_.isEmpty()) {
            if (comboInfoBuilder_.isEmpty()) {
              comboInfoBuilder_.dispose();
              comboInfoBuilder_ = null;
              comboInfo_ = other.comboInfo_;
              bitField0_ = (bitField0_ & ~0x00000200);
              comboInfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getComboInfoFieldBuilder() : null;
            } else {
              comboInfoBuilder_.addAllMessages(other.comboInfo_);
            }
          }
        }
        if (composeInfoBuilder_ == null) {
          if (!other.composeInfo_.isEmpty()) {
            if (composeInfo_.isEmpty()) {
              composeInfo_ = other.composeInfo_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureComposeInfoIsMutable();
              composeInfo_.addAll(other.composeInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.composeInfo_.isEmpty()) {
            if (composeInfoBuilder_.isEmpty()) {
              composeInfoBuilder_.dispose();
              composeInfoBuilder_ = null;
              composeInfo_ = other.composeInfo_;
              bitField0_ = (bitField0_ & ~0x00000400);
              composeInfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getComposeInfoFieldBuilder() : null;
            } else {
              composeInfoBuilder_.addAllMessages(other.composeInfo_);
            }
          }
        }
        if (scoreInfoBuilder_ == null) {
          if (!other.scoreInfo_.isEmpty()) {
            if (scoreInfo_.isEmpty()) {
              scoreInfo_ = other.scoreInfo_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureScoreInfoIsMutable();
              scoreInfo_.addAll(other.scoreInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.scoreInfo_.isEmpty()) {
            if (scoreInfoBuilder_.isEmpty()) {
              scoreInfoBuilder_.dispose();
              scoreInfoBuilder_ = null;
              scoreInfo_ = other.scoreInfo_;
              bitField0_ = (bitField0_ & ~0x00000800);
              scoreInfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getScoreInfoFieldBuilder() : null;
            } else {
              scoreInfoBuilder_.addAllMessages(other.scoreInfo_);
            }
          }
        }
        if (other.hasSkillNum()) {
          setSkillNum(other.getSkillNum());
        }
        if (leftTargetsBuilder_ == null) {
          if (!other.leftTargets_.isEmpty()) {
            if (leftTargets_.isEmpty()) {
              leftTargets_ = other.leftTargets_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensureLeftTargetsIsMutable();
              leftTargets_.addAll(other.leftTargets_);
            }
            onChanged();
          }
        } else {
          if (!other.leftTargets_.isEmpty()) {
            if (leftTargetsBuilder_.isEmpty()) {
              leftTargetsBuilder_.dispose();
              leftTargetsBuilder_ = null;
              leftTargets_ = other.leftTargets_;
              bitField0_ = (bitField0_ & ~0x00002000);
              leftTargetsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLeftTargetsFieldBuilder() : null;
            } else {
              leftTargetsBuilder_.addAllMessages(other.leftTargets_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              msgType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              battleType_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              cityId_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              pveId_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              dupId_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              result_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              leftStep_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              costStep_ = input.readInt32();
              break;
            }
            case 82: {
              buffer.CGBattlePveResult.ChessProto.Builder subBuilder = buffer.CGBattlePveResult.ChessProto.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addChessInfo(subBuilder.buildPartial());
              break;
            }
            case 90: {
              buffer.CGBattlePveResult.ComboProto.Builder subBuilder = buffer.CGBattlePveResult.ComboProto.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addComboInfo(subBuilder.buildPartial());
              break;
            }
            case 98: {
              buffer.CGBattlePveResult.ChessProto.Builder subBuilder = buffer.CGBattlePveResult.ChessProto.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addComposeInfo(subBuilder.buildPartial());
              break;
            }
            case 106: {
              buffer.CGBattlePveResult.ChessProto.Builder subBuilder = buffer.CGBattlePveResult.ChessProto.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addScoreInfo(subBuilder.buildPartial());
              break;
            }
            case 112: {
              bitField0_ |= 0x00001000;
              skillNum_ = input.readInt32();
              break;
            }
            case 122: {
              buffer.CGBattlePveResult.ChessProto.Builder subBuilder = buffer.CGBattlePveResult.ChessProto.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addLeftTargets(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional int32 msgType = 1 [default = 25001];
      private int msgType_ = 25001;
      public boolean hasMsgType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getMsgType() {
        return msgType_;
      }
      public Builder setMsgType(int value) {
        bitField0_ |= 0x00000001;
        msgType_ = value;
        onChanged();
        return this;
      }
      public Builder clearMsgType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        msgType_ = 25001;
        onChanged();
        return this;
      }
      
      // optional int32 battleType = 2;
      private int battleType_ ;
      public boolean hasBattleType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getBattleType() {
        return battleType_;
      }
      public Builder setBattleType(int value) {
        bitField0_ |= 0x00000002;
        battleType_ = value;
        onChanged();
        return this;
      }
      public Builder clearBattleType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        battleType_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 cityId = 3;
      private int cityId_ ;
      public boolean hasCityId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getCityId() {
        return cityId_;
      }
      public Builder setCityId(int value) {
        bitField0_ |= 0x00000004;
        cityId_ = value;
        onChanged();
        return this;
      }
      public Builder clearCityId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cityId_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 pveId = 4;
      private int pveId_ ;
      public boolean hasPveId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getPveId() {
        return pveId_;
      }
      public Builder setPveId(int value) {
        bitField0_ |= 0x00000008;
        pveId_ = value;
        onChanged();
        return this;
      }
      public Builder clearPveId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        pveId_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 dupId = 5;
      private int dupId_ ;
      public boolean hasDupId() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getDupId() {
        return dupId_;
      }
      public Builder setDupId(int value) {
        bitField0_ |= 0x00000010;
        dupId_ = value;
        onChanged();
        return this;
      }
      public Builder clearDupId() {
        bitField0_ = (bitField0_ & ~0x00000010);
        dupId_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 result = 6;
      private int result_ ;
      public boolean hasResult() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public int getResult() {
        return result_;
      }
      public Builder setResult(int value) {
        bitField0_ |= 0x00000020;
        result_ = value;
        onChanged();
        return this;
      }
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000020);
        result_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 leftStep = 7;
      private int leftStep_ ;
      public boolean hasLeftStep() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public int getLeftStep() {
        return leftStep_;
      }
      public Builder setLeftStep(int value) {
        bitField0_ |= 0x00000040;
        leftStep_ = value;
        onChanged();
        return this;
      }
      public Builder clearLeftStep() {
        bitField0_ = (bitField0_ & ~0x00000040);
        leftStep_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 costStep = 8;
      private int costStep_ ;
      public boolean hasCostStep() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public int getCostStep() {
        return costStep_;
      }
      public Builder setCostStep(int value) {
        bitField0_ |= 0x00000080;
        costStep_ = value;
        onChanged();
        return this;
      }
      public Builder clearCostStep() {
        bitField0_ = (bitField0_ & ~0x00000080);
        costStep_ = 0;
        onChanged();
        return this;
      }
      
      // repeated .buffer.ChessProto chessInfo = 10;
      private java.util.List<buffer.CGBattlePveResult.ChessProto> chessInfo_ =
        java.util.Collections.emptyList();
      private void ensureChessInfoIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          chessInfo_ = new java.util.ArrayList<buffer.CGBattlePveResult.ChessProto>(chessInfo_);
          bitField0_ |= 0x00000100;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder> chessInfoBuilder_;
      
      public java.util.List<buffer.CGBattlePveResult.ChessProto> getChessInfoList() {
        if (chessInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(chessInfo_);
        } else {
          return chessInfoBuilder_.getMessageList();
        }
      }
      public int getChessInfoCount() {
        if (chessInfoBuilder_ == null) {
          return chessInfo_.size();
        } else {
          return chessInfoBuilder_.getCount();
        }
      }
      public buffer.CGBattlePveResult.ChessProto getChessInfo(int index) {
        if (chessInfoBuilder_ == null) {
          return chessInfo_.get(index);
        } else {
          return chessInfoBuilder_.getMessage(index);
        }
      }
      public Builder setChessInfo(
          int index, buffer.CGBattlePveResult.ChessProto value) {
        if (chessInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChessInfoIsMutable();
          chessInfo_.set(index, value);
          onChanged();
        } else {
          chessInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setChessInfo(
          int index, buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (chessInfoBuilder_ == null) {
          ensureChessInfoIsMutable();
          chessInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          chessInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addChessInfo(buffer.CGBattlePveResult.ChessProto value) {
        if (chessInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChessInfoIsMutable();
          chessInfo_.add(value);
          onChanged();
        } else {
          chessInfoBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addChessInfo(
          int index, buffer.CGBattlePveResult.ChessProto value) {
        if (chessInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChessInfoIsMutable();
          chessInfo_.add(index, value);
          onChanged();
        } else {
          chessInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addChessInfo(
          buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (chessInfoBuilder_ == null) {
          ensureChessInfoIsMutable();
          chessInfo_.add(builderForValue.build());
          onChanged();
        } else {
          chessInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addChessInfo(
          int index, buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (chessInfoBuilder_ == null) {
          ensureChessInfoIsMutable();
          chessInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          chessInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllChessInfo(
          java.lang.Iterable<? extends buffer.CGBattlePveResult.ChessProto> values) {
        if (chessInfoBuilder_ == null) {
          ensureChessInfoIsMutable();
          super.addAll(values, chessInfo_);
          onChanged();
        } else {
          chessInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearChessInfo() {
        if (chessInfoBuilder_ == null) {
          chessInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          chessInfoBuilder_.clear();
        }
        return this;
      }
      public Builder removeChessInfo(int index) {
        if (chessInfoBuilder_ == null) {
          ensureChessInfoIsMutable();
          chessInfo_.remove(index);
          onChanged();
        } else {
          chessInfoBuilder_.remove(index);
        }
        return this;
      }
      public buffer.CGBattlePveResult.ChessProto.Builder getChessInfoBuilder(
          int index) {
        return getChessInfoFieldBuilder().getBuilder(index);
      }
      public buffer.CGBattlePveResult.ChessProtoOrBuilder getChessInfoOrBuilder(
          int index) {
        if (chessInfoBuilder_ == null) {
          return chessInfo_.get(index);  } else {
          return chessInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
           getChessInfoOrBuilderList() {
        if (chessInfoBuilder_ != null) {
          return chessInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(chessInfo_);
        }
      }
      public buffer.CGBattlePveResult.ChessProto.Builder addChessInfoBuilder() {
        return getChessInfoFieldBuilder().addBuilder(
            buffer.CGBattlePveResult.ChessProto.getDefaultInstance());
      }
      public buffer.CGBattlePveResult.ChessProto.Builder addChessInfoBuilder(
          int index) {
        return getChessInfoFieldBuilder().addBuilder(
            index, buffer.CGBattlePveResult.ChessProto.getDefaultInstance());
      }
      public java.util.List<buffer.CGBattlePveResult.ChessProto.Builder> 
           getChessInfoBuilderList() {
        return getChessInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder> 
          getChessInfoFieldBuilder() {
        if (chessInfoBuilder_ == null) {
          chessInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder>(
                  chessInfo_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          chessInfo_ = null;
        }
        return chessInfoBuilder_;
      }
      
      // repeated .buffer.ComboProto comboInfo = 11;
      private java.util.List<buffer.CGBattlePveResult.ComboProto> comboInfo_ =
        java.util.Collections.emptyList();
      private void ensureComboInfoIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          comboInfo_ = new java.util.ArrayList<buffer.CGBattlePveResult.ComboProto>(comboInfo_);
          bitField0_ |= 0x00000200;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          buffer.CGBattlePveResult.ComboProto, buffer.CGBattlePveResult.ComboProto.Builder, buffer.CGBattlePveResult.ComboProtoOrBuilder> comboInfoBuilder_;
      
      public java.util.List<buffer.CGBattlePveResult.ComboProto> getComboInfoList() {
        if (comboInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(comboInfo_);
        } else {
          return comboInfoBuilder_.getMessageList();
        }
      }
      public int getComboInfoCount() {
        if (comboInfoBuilder_ == null) {
          return comboInfo_.size();
        } else {
          return comboInfoBuilder_.getCount();
        }
      }
      public buffer.CGBattlePveResult.ComboProto getComboInfo(int index) {
        if (comboInfoBuilder_ == null) {
          return comboInfo_.get(index);
        } else {
          return comboInfoBuilder_.getMessage(index);
        }
      }
      public Builder setComboInfo(
          int index, buffer.CGBattlePveResult.ComboProto value) {
        if (comboInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComboInfoIsMutable();
          comboInfo_.set(index, value);
          onChanged();
        } else {
          comboInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setComboInfo(
          int index, buffer.CGBattlePveResult.ComboProto.Builder builderForValue) {
        if (comboInfoBuilder_ == null) {
          ensureComboInfoIsMutable();
          comboInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          comboInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addComboInfo(buffer.CGBattlePveResult.ComboProto value) {
        if (comboInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComboInfoIsMutable();
          comboInfo_.add(value);
          onChanged();
        } else {
          comboInfoBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addComboInfo(
          int index, buffer.CGBattlePveResult.ComboProto value) {
        if (comboInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComboInfoIsMutable();
          comboInfo_.add(index, value);
          onChanged();
        } else {
          comboInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addComboInfo(
          buffer.CGBattlePveResult.ComboProto.Builder builderForValue) {
        if (comboInfoBuilder_ == null) {
          ensureComboInfoIsMutable();
          comboInfo_.add(builderForValue.build());
          onChanged();
        } else {
          comboInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addComboInfo(
          int index, buffer.CGBattlePveResult.ComboProto.Builder builderForValue) {
        if (comboInfoBuilder_ == null) {
          ensureComboInfoIsMutable();
          comboInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          comboInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllComboInfo(
          java.lang.Iterable<? extends buffer.CGBattlePveResult.ComboProto> values) {
        if (comboInfoBuilder_ == null) {
          ensureComboInfoIsMutable();
          super.addAll(values, comboInfo_);
          onChanged();
        } else {
          comboInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearComboInfo() {
        if (comboInfoBuilder_ == null) {
          comboInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          comboInfoBuilder_.clear();
        }
        return this;
      }
      public Builder removeComboInfo(int index) {
        if (comboInfoBuilder_ == null) {
          ensureComboInfoIsMutable();
          comboInfo_.remove(index);
          onChanged();
        } else {
          comboInfoBuilder_.remove(index);
        }
        return this;
      }
      public buffer.CGBattlePveResult.ComboProto.Builder getComboInfoBuilder(
          int index) {
        return getComboInfoFieldBuilder().getBuilder(index);
      }
      public buffer.CGBattlePveResult.ComboProtoOrBuilder getComboInfoOrBuilder(
          int index) {
        if (comboInfoBuilder_ == null) {
          return comboInfo_.get(index);  } else {
          return comboInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends buffer.CGBattlePveResult.ComboProtoOrBuilder> 
           getComboInfoOrBuilderList() {
        if (comboInfoBuilder_ != null) {
          return comboInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(comboInfo_);
        }
      }
      public buffer.CGBattlePveResult.ComboProto.Builder addComboInfoBuilder() {
        return getComboInfoFieldBuilder().addBuilder(
            buffer.CGBattlePveResult.ComboProto.getDefaultInstance());
      }
      public buffer.CGBattlePveResult.ComboProto.Builder addComboInfoBuilder(
          int index) {
        return getComboInfoFieldBuilder().addBuilder(
            index, buffer.CGBattlePveResult.ComboProto.getDefaultInstance());
      }
      public java.util.List<buffer.CGBattlePveResult.ComboProto.Builder> 
           getComboInfoBuilderList() {
        return getComboInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          buffer.CGBattlePveResult.ComboProto, buffer.CGBattlePveResult.ComboProto.Builder, buffer.CGBattlePveResult.ComboProtoOrBuilder> 
          getComboInfoFieldBuilder() {
        if (comboInfoBuilder_ == null) {
          comboInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              buffer.CGBattlePveResult.ComboProto, buffer.CGBattlePveResult.ComboProto.Builder, buffer.CGBattlePveResult.ComboProtoOrBuilder>(
                  comboInfo_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          comboInfo_ = null;
        }
        return comboInfoBuilder_;
      }
      
      // repeated .buffer.ChessProto composeInfo = 12;
      private java.util.List<buffer.CGBattlePveResult.ChessProto> composeInfo_ =
        java.util.Collections.emptyList();
      private void ensureComposeInfoIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          composeInfo_ = new java.util.ArrayList<buffer.CGBattlePveResult.ChessProto>(composeInfo_);
          bitField0_ |= 0x00000400;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder> composeInfoBuilder_;
      
      public java.util.List<buffer.CGBattlePveResult.ChessProto> getComposeInfoList() {
        if (composeInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(composeInfo_);
        } else {
          return composeInfoBuilder_.getMessageList();
        }
      }
      public int getComposeInfoCount() {
        if (composeInfoBuilder_ == null) {
          return composeInfo_.size();
        } else {
          return composeInfoBuilder_.getCount();
        }
      }
      public buffer.CGBattlePveResult.ChessProto getComposeInfo(int index) {
        if (composeInfoBuilder_ == null) {
          return composeInfo_.get(index);
        } else {
          return composeInfoBuilder_.getMessage(index);
        }
      }
      public Builder setComposeInfo(
          int index, buffer.CGBattlePveResult.ChessProto value) {
        if (composeInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComposeInfoIsMutable();
          composeInfo_.set(index, value);
          onChanged();
        } else {
          composeInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setComposeInfo(
          int index, buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (composeInfoBuilder_ == null) {
          ensureComposeInfoIsMutable();
          composeInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          composeInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addComposeInfo(buffer.CGBattlePveResult.ChessProto value) {
        if (composeInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComposeInfoIsMutable();
          composeInfo_.add(value);
          onChanged();
        } else {
          composeInfoBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addComposeInfo(
          int index, buffer.CGBattlePveResult.ChessProto value) {
        if (composeInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureComposeInfoIsMutable();
          composeInfo_.add(index, value);
          onChanged();
        } else {
          composeInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addComposeInfo(
          buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (composeInfoBuilder_ == null) {
          ensureComposeInfoIsMutable();
          composeInfo_.add(builderForValue.build());
          onChanged();
        } else {
          composeInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addComposeInfo(
          int index, buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (composeInfoBuilder_ == null) {
          ensureComposeInfoIsMutable();
          composeInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          composeInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllComposeInfo(
          java.lang.Iterable<? extends buffer.CGBattlePveResult.ChessProto> values) {
        if (composeInfoBuilder_ == null) {
          ensureComposeInfoIsMutable();
          super.addAll(values, composeInfo_);
          onChanged();
        } else {
          composeInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearComposeInfo() {
        if (composeInfoBuilder_ == null) {
          composeInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          composeInfoBuilder_.clear();
        }
        return this;
      }
      public Builder removeComposeInfo(int index) {
        if (composeInfoBuilder_ == null) {
          ensureComposeInfoIsMutable();
          composeInfo_.remove(index);
          onChanged();
        } else {
          composeInfoBuilder_.remove(index);
        }
        return this;
      }
      public buffer.CGBattlePveResult.ChessProto.Builder getComposeInfoBuilder(
          int index) {
        return getComposeInfoFieldBuilder().getBuilder(index);
      }
      public buffer.CGBattlePveResult.ChessProtoOrBuilder getComposeInfoOrBuilder(
          int index) {
        if (composeInfoBuilder_ == null) {
          return composeInfo_.get(index);  } else {
          return composeInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
           getComposeInfoOrBuilderList() {
        if (composeInfoBuilder_ != null) {
          return composeInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(composeInfo_);
        }
      }
      public buffer.CGBattlePveResult.ChessProto.Builder addComposeInfoBuilder() {
        return getComposeInfoFieldBuilder().addBuilder(
            buffer.CGBattlePveResult.ChessProto.getDefaultInstance());
      }
      public buffer.CGBattlePveResult.ChessProto.Builder addComposeInfoBuilder(
          int index) {
        return getComposeInfoFieldBuilder().addBuilder(
            index, buffer.CGBattlePveResult.ChessProto.getDefaultInstance());
      }
      public java.util.List<buffer.CGBattlePveResult.ChessProto.Builder> 
           getComposeInfoBuilderList() {
        return getComposeInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder> 
          getComposeInfoFieldBuilder() {
        if (composeInfoBuilder_ == null) {
          composeInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder>(
                  composeInfo_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          composeInfo_ = null;
        }
        return composeInfoBuilder_;
      }
      
      // repeated .buffer.ChessProto scoreInfo = 13;
      private java.util.List<buffer.CGBattlePveResult.ChessProto> scoreInfo_ =
        java.util.Collections.emptyList();
      private void ensureScoreInfoIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          scoreInfo_ = new java.util.ArrayList<buffer.CGBattlePveResult.ChessProto>(scoreInfo_);
          bitField0_ |= 0x00000800;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder> scoreInfoBuilder_;
      
      public java.util.List<buffer.CGBattlePveResult.ChessProto> getScoreInfoList() {
        if (scoreInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(scoreInfo_);
        } else {
          return scoreInfoBuilder_.getMessageList();
        }
      }
      public int getScoreInfoCount() {
        if (scoreInfoBuilder_ == null) {
          return scoreInfo_.size();
        } else {
          return scoreInfoBuilder_.getCount();
        }
      }
      public buffer.CGBattlePveResult.ChessProto getScoreInfo(int index) {
        if (scoreInfoBuilder_ == null) {
          return scoreInfo_.get(index);
        } else {
          return scoreInfoBuilder_.getMessage(index);
        }
      }
      public Builder setScoreInfo(
          int index, buffer.CGBattlePveResult.ChessProto value) {
        if (scoreInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScoreInfoIsMutable();
          scoreInfo_.set(index, value);
          onChanged();
        } else {
          scoreInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setScoreInfo(
          int index, buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (scoreInfoBuilder_ == null) {
          ensureScoreInfoIsMutable();
          scoreInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          scoreInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addScoreInfo(buffer.CGBattlePveResult.ChessProto value) {
        if (scoreInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScoreInfoIsMutable();
          scoreInfo_.add(value);
          onChanged();
        } else {
          scoreInfoBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addScoreInfo(
          int index, buffer.CGBattlePveResult.ChessProto value) {
        if (scoreInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScoreInfoIsMutable();
          scoreInfo_.add(index, value);
          onChanged();
        } else {
          scoreInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addScoreInfo(
          buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (scoreInfoBuilder_ == null) {
          ensureScoreInfoIsMutable();
          scoreInfo_.add(builderForValue.build());
          onChanged();
        } else {
          scoreInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addScoreInfo(
          int index, buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (scoreInfoBuilder_ == null) {
          ensureScoreInfoIsMutable();
          scoreInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          scoreInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllScoreInfo(
          java.lang.Iterable<? extends buffer.CGBattlePveResult.ChessProto> values) {
        if (scoreInfoBuilder_ == null) {
          ensureScoreInfoIsMutable();
          super.addAll(values, scoreInfo_);
          onChanged();
        } else {
          scoreInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearScoreInfo() {
        if (scoreInfoBuilder_ == null) {
          scoreInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          scoreInfoBuilder_.clear();
        }
        return this;
      }
      public Builder removeScoreInfo(int index) {
        if (scoreInfoBuilder_ == null) {
          ensureScoreInfoIsMutable();
          scoreInfo_.remove(index);
          onChanged();
        } else {
          scoreInfoBuilder_.remove(index);
        }
        return this;
      }
      public buffer.CGBattlePveResult.ChessProto.Builder getScoreInfoBuilder(
          int index) {
        return getScoreInfoFieldBuilder().getBuilder(index);
      }
      public buffer.CGBattlePveResult.ChessProtoOrBuilder getScoreInfoOrBuilder(
          int index) {
        if (scoreInfoBuilder_ == null) {
          return scoreInfo_.get(index);  } else {
          return scoreInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
           getScoreInfoOrBuilderList() {
        if (scoreInfoBuilder_ != null) {
          return scoreInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(scoreInfo_);
        }
      }
      public buffer.CGBattlePveResult.ChessProto.Builder addScoreInfoBuilder() {
        return getScoreInfoFieldBuilder().addBuilder(
            buffer.CGBattlePveResult.ChessProto.getDefaultInstance());
      }
      public buffer.CGBattlePveResult.ChessProto.Builder addScoreInfoBuilder(
          int index) {
        return getScoreInfoFieldBuilder().addBuilder(
            index, buffer.CGBattlePveResult.ChessProto.getDefaultInstance());
      }
      public java.util.List<buffer.CGBattlePveResult.ChessProto.Builder> 
           getScoreInfoBuilderList() {
        return getScoreInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder> 
          getScoreInfoFieldBuilder() {
        if (scoreInfoBuilder_ == null) {
          scoreInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder>(
                  scoreInfo_,
                  ((bitField0_ & 0x00000800) == 0x00000800),
                  getParentForChildren(),
                  isClean());
          scoreInfo_ = null;
        }
        return scoreInfoBuilder_;
      }
      
      // optional int32 skillNum = 14;
      private int skillNum_ ;
      public boolean hasSkillNum() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      public int getSkillNum() {
        return skillNum_;
      }
      public Builder setSkillNum(int value) {
        bitField0_ |= 0x00001000;
        skillNum_ = value;
        onChanged();
        return this;
      }
      public Builder clearSkillNum() {
        bitField0_ = (bitField0_ & ~0x00001000);
        skillNum_ = 0;
        onChanged();
        return this;
      }
      
      // repeated .buffer.ChessProto leftTargets = 15;
      private java.util.List<buffer.CGBattlePveResult.ChessProto> leftTargets_ =
        java.util.Collections.emptyList();
      private void ensureLeftTargetsIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          leftTargets_ = new java.util.ArrayList<buffer.CGBattlePveResult.ChessProto>(leftTargets_);
          bitField0_ |= 0x00002000;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder> leftTargetsBuilder_;
      
      public java.util.List<buffer.CGBattlePveResult.ChessProto> getLeftTargetsList() {
        if (leftTargetsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(leftTargets_);
        } else {
          return leftTargetsBuilder_.getMessageList();
        }
      }
      public int getLeftTargetsCount() {
        if (leftTargetsBuilder_ == null) {
          return leftTargets_.size();
        } else {
          return leftTargetsBuilder_.getCount();
        }
      }
      public buffer.CGBattlePveResult.ChessProto getLeftTargets(int index) {
        if (leftTargetsBuilder_ == null) {
          return leftTargets_.get(index);
        } else {
          return leftTargetsBuilder_.getMessage(index);
        }
      }
      public Builder setLeftTargets(
          int index, buffer.CGBattlePveResult.ChessProto value) {
        if (leftTargetsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftTargetsIsMutable();
          leftTargets_.set(index, value);
          onChanged();
        } else {
          leftTargetsBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setLeftTargets(
          int index, buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (leftTargetsBuilder_ == null) {
          ensureLeftTargetsIsMutable();
          leftTargets_.set(index, builderForValue.build());
          onChanged();
        } else {
          leftTargetsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addLeftTargets(buffer.CGBattlePveResult.ChessProto value) {
        if (leftTargetsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftTargetsIsMutable();
          leftTargets_.add(value);
          onChanged();
        } else {
          leftTargetsBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addLeftTargets(
          int index, buffer.CGBattlePveResult.ChessProto value) {
        if (leftTargetsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftTargetsIsMutable();
          leftTargets_.add(index, value);
          onChanged();
        } else {
          leftTargetsBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addLeftTargets(
          buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (leftTargetsBuilder_ == null) {
          ensureLeftTargetsIsMutable();
          leftTargets_.add(builderForValue.build());
          onChanged();
        } else {
          leftTargetsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addLeftTargets(
          int index, buffer.CGBattlePveResult.ChessProto.Builder builderForValue) {
        if (leftTargetsBuilder_ == null) {
          ensureLeftTargetsIsMutable();
          leftTargets_.add(index, builderForValue.build());
          onChanged();
        } else {
          leftTargetsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllLeftTargets(
          java.lang.Iterable<? extends buffer.CGBattlePveResult.ChessProto> values) {
        if (leftTargetsBuilder_ == null) {
          ensureLeftTargetsIsMutable();
          super.addAll(values, leftTargets_);
          onChanged();
        } else {
          leftTargetsBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearLeftTargets() {
        if (leftTargetsBuilder_ == null) {
          leftTargets_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
        } else {
          leftTargetsBuilder_.clear();
        }
        return this;
      }
      public Builder removeLeftTargets(int index) {
        if (leftTargetsBuilder_ == null) {
          ensureLeftTargetsIsMutable();
          leftTargets_.remove(index);
          onChanged();
        } else {
          leftTargetsBuilder_.remove(index);
        }
        return this;
      }
      public buffer.CGBattlePveResult.ChessProto.Builder getLeftTargetsBuilder(
          int index) {
        return getLeftTargetsFieldBuilder().getBuilder(index);
      }
      public buffer.CGBattlePveResult.ChessProtoOrBuilder getLeftTargetsOrBuilder(
          int index) {
        if (leftTargetsBuilder_ == null) {
          return leftTargets_.get(index);  } else {
          return leftTargetsBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends buffer.CGBattlePveResult.ChessProtoOrBuilder> 
           getLeftTargetsOrBuilderList() {
        if (leftTargetsBuilder_ != null) {
          return leftTargetsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(leftTargets_);
        }
      }
      public buffer.CGBattlePveResult.ChessProto.Builder addLeftTargetsBuilder() {
        return getLeftTargetsFieldBuilder().addBuilder(
            buffer.CGBattlePveResult.ChessProto.getDefaultInstance());
      }
      public buffer.CGBattlePveResult.ChessProto.Builder addLeftTargetsBuilder(
          int index) {
        return getLeftTargetsFieldBuilder().addBuilder(
            index, buffer.CGBattlePveResult.ChessProto.getDefaultInstance());
      }
      public java.util.List<buffer.CGBattlePveResult.ChessProto.Builder> 
           getLeftTargetsBuilderList() {
        return getLeftTargetsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder> 
          getLeftTargetsFieldBuilder() {
        if (leftTargetsBuilder_ == null) {
          leftTargetsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              buffer.CGBattlePveResult.ChessProto, buffer.CGBattlePveResult.ChessProto.Builder, buffer.CGBattlePveResult.ChessProtoOrBuilder>(
                  leftTargets_,
                  ((bitField0_ & 0x00002000) == 0x00002000),
                  getParentForChildren(),
                  isClean());
          leftTargets_ = null;
        }
        return leftTargetsBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:buffer.CGBattlePveResultProto)
    }
    
    static {
      defaultInstance = new CGBattlePveResultProto(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:buffer.CGBattlePveResultProto)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_buffer_ChessProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buffer_ChessProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_buffer_ComboProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buffer_ComboProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_buffer_CGBattlePveResultProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buffer_CGBattlePveResultProto_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\027CGBattlePveResult.proto\022\006buffer\"/\n\nChe" +
      "ssProto\022\017\n\007chessId\030\001 \001(\005\022\020\n\010chessNum\030\002 \001" +
      "(\005\"/\n\nComboProto\022\017\n\007comboId\030\001 \001(\005\022\020\n\010com" +
      "boNum\030\002 \001(\005\"\377\002\n\026CGBattlePveResultProto\022\026" +
      "\n\007msgType\030\001 \001(\005:\00525001\022\022\n\nbattleType\030\002 \001" +
      "(\005\022\016\n\006cityId\030\003 \001(\005\022\r\n\005pveId\030\004 \001(\005\022\r\n\005dup" +
      "Id\030\005 \001(\005\022\016\n\006result\030\006 \001(\005\022\020\n\010leftStep\030\007 \001" +
      "(\005\022\020\n\010costStep\030\010 \001(\005\022%\n\tchessInfo\030\n \003(\0132" +
      "\022.buffer.ChessProto\022%\n\tcomboInfo\030\013 \003(\0132\022" +
      ".buffer.ComboProto\022\'\n\013composeInfo\030\014 \003(\0132",
      "\022.buffer.ChessProto\022%\n\tscoreInfo\030\r \003(\0132\022" +
      ".buffer.ChessProto\022\020\n\010skillNum\030\016 \001(\005\022\'\n\013" +
      "leftTargets\030\017 \003(\0132\022.buffer.ChessProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_buffer_ChessProto_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_buffer_ChessProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_buffer_ChessProto_descriptor,
              new java.lang.String[] { "ChessId", "ChessNum", },
              buffer.CGBattlePveResult.ChessProto.class,
              buffer.CGBattlePveResult.ChessProto.Builder.class);
          internal_static_buffer_ComboProto_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_buffer_ComboProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_buffer_ComboProto_descriptor,
              new java.lang.String[] { "ComboId", "ComboNum", },
              buffer.CGBattlePveResult.ComboProto.class,
              buffer.CGBattlePveResult.ComboProto.Builder.class);
          internal_static_buffer_CGBattlePveResultProto_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_buffer_CGBattlePveResultProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_buffer_CGBattlePveResultProto_descriptor,
              new java.lang.String[] { "MsgType", "BattleType", "CityId", "PveId", "DupId", "Result", "LeftStep", "CostStep", "ChessInfo", "ComboInfo", "ComposeInfo", "ScoreInfo", "SkillNum", "LeftTargets", },
              buffer.CGBattlePveResult.CGBattlePveResultProto.class,
              buffer.CGBattlePveResult.CGBattlePveResultProto.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
